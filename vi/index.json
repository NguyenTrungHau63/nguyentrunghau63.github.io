[
{
	"uri": "/vi/",
	"title": "Triển khai hệ thống NextGen trên AWS",
	"tags": [],
	"description": "Tài liệu này cung cấp hướng dẫn từng bước để triển khai một hệ thống hoàn chỉnh trên nền tảng AWS, bao gồm S3, DynamoDB, Lambda, API Gateway và CloudWatch.",
	"content": "Đề tài: Data Visualization Automation với Programmatic Dashboards Yêu cầu: Develop automated visualization platform với programmatic dashboard generation, alerting, distribution, governance. Yêu cầu: Automation framework, dashboard generation, alert integration, distribution automation, governance implementation, monitoring setup, operational procedures, user management.\n1. Tạo S3 Bucket và Website Hosting Đầu tiên, chúng ta sẽ tạo một S3 bucket để lưu trữ mã nguồn của website.\n  Truy cập AWS Management Console và tìm kiếm S3.\n  Chọn Create bucket.\n  Trong giao diện Create bucket:\n Bucket name: Nhập nextgen-web-app (thêm một vài số phía sau nếu tên đã tồn tại). Object Ownership: Chọn ACLs disabled (recommended).   Block Public Access settings: Giữ nguyên mặc định.     Chọn Create bucket.   Tải dữ liệu lên S3  Tải mã nguồn từ GitHub về máy: https://github.com/NguyenTrungHau63/NextGen.git.  Mở thư mục nextgen-client trong Visual Studio Code. Chạy các lệnh sau trong terminal để build dự án: npm i npm run build  Trong giao diện S3, chọn bucket vừa tạo và nhấn Upload. Chọn các file và thư mục trong thư mục nextgen-client/dist để tải lên.   Cấu hình Static Website Hosting  Trong giao diện S3 bucket, chọn tab Properties.  Kéo xuống và chọn Edit trong mục Static website hosting.  Chọn Enable, sau đó chọn Host a static website. Nhập index.html vào trường Index document.  Lưu lại các thay đổi.   Cấu hình Public Access và Bucket Policy  Trong tab Permissions, chọn Edit ở mục Block public access (bucket settings).  Bỏ chọn Block all public access và lưu thay đổi, sau đó xác nhận.  Tiếp tục tại tab Permissions, chọn Edit ở mục Bucket policy.  Dán đoạn policy sau để cho phép truy cập công khai vào các đối tượng trong bucket: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::nextgen-web-app2406/*\u0026#34; } ] }  Nhấn Save changes.   2. Tạo DynamoDB Tables Chúng ta sẽ tạo các bảng DynamoDB cần thiết để lưu trữ dữ liệu cho hệ thống.\n Truy cập DynamoDB Console và chọn Create table. Tạo bảng nextgen-tasks:  Table name: NextGenTasks Partition key: id (String) Sort key: timestamp (String)    Tạo các bảng tương tự như sau:  nextgen-products (Partition key: id - String)  nextgen-categories (Partition key: id - String) nextgen-banners (Partition key: id - String)    Tạo bảng nextgen-users: NextGen-Tasks:  NextGen-Metrics:   3. Tạo Lambda Function Lambda Function sẽ là nơi chứa logic xử lý backend cho ứng dụng.\n  Truy cập Lambda Console và chọn Create function.\n  Cấu hình function:\n Function name: nextgen-automation-api Runtime: Node.js 22.x Architecture: x86_64    Nhấn Create function.   Trong tab Code, dán mã nguồn được cung cấp.\nimport { DynamoDBClient } from \u0026#34;@aws-sdk/client-dynamodb\u0026#34;; import { DynamoDBDocumentClient, ScanCommand, PutCommand } from \u0026#34;@aws-sdk/lib-dynamodb\u0026#34;; import { SNSClient, PublishCommand } from \u0026#34;@aws-sdk/client-sns\u0026#34;; const dynamoClient = new DynamoDBClient({ region: \u0026#34;us-east-1\u0026#34; }); const dynamodb = DynamoDBDocumentClient.from(dynamoClient); const sns = new SNSClient({ region: \u0026#34;us-east-1\u0026#34; }); export const handler = async (event) =\u0026gt; { console.log(\u0026#39;Event:\u0026#39;, JSON.stringify(event, null, 2)); const headers = { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type\u0026#39; }; try { const { httpMethod, path } = event; if (httpMethod === \u0026#39;GET\u0026#39; \u0026amp;\u0026amp; path === \u0026#39;/api\u0026#39;) { return await getDashboardData(headers); } if (httpMethod === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; path === \u0026#39;/api\u0026#39;) { const body = JSON.parse(event.body || \u0026#39;{}\u0026#39;); return await triggerAutomation(body, headers); } return { statusCode: 404, headers, body: JSON.stringify({ error: \u0026#39;Not Found\u0026#39; }) }; } catch (error) { console.error(\u0026#39;Error:\u0026#39;, error); return { statusCode: 500, headers, body: JSON.stringify({ error: error.message }) }; } }; async function getDashboardData(headers) { try { const command = new ScanCommand({ TableName: \u0026#39;NextGenTasks\u0026#39; }); const tasks = await dynamodb.send(command); return { statusCode: 200, headers, body: JSON.stringify({ metrics: { users: 150, tasks: tasks.Items.length, alerts: 3 }, status: \u0026#39;operational\u0026#39;, timestamp: new Date().toISOString() }) }; } catch (error) { throw new Error(`Dashboard error: ${error.message}`); } } async function triggerAutomation(data, headers) { try { const task = { id: Date.now().toString(), task: data.task || \u0026#39;Default automation task\u0026#39;, status: \u0026#39;pending\u0026#39;, timestamp: new Date().toISOString(), priority: data.priority || \u0026#39;medium\u0026#39; }; const putCommand = new PutCommand({ TableName: \u0026#39;NextGenTasks\u0026#39;, Item: task }); await dynamodb.send(putCommand); // Send SNS notification  const publishCommand = new PublishCommand({ TopicArn: \u0026#39;arn:aws:sns:us-east-1:048244750537:nextgen-alerts\u0026#39;, Message: `New automation task: ${task.task}`, Subject: \u0026#39;NextGen Automation Triggered\u0026#39; }); await sns.send(publishCommand); return { statusCode: 200, headers, body: JSON.stringify({ message: \u0026#39;Automation triggered successfully\u0026#39;, taskId: task.id }) }; } catch (error) { throw new Error(`Automation error: ${error.message}`); } }   Nhấn Deploy để lưu lại code.   4. Tạo API Gateway API Gateway sẽ đóng vai trò là điểm cuối (endpoint) cho ứng dụng frontend.\n  Truy cập API Gateway Console và chọn Create API -\u0026gt; REST API.   API name: nextgen-api\n  Endpoint type: Regional   Tạo một resource có tên api với path /api.   Trong resource /api vừa tạo, thêm một method ANY.\n  Tích hợp method này với Lambda Function nextgen-automation-api.   Tương tự cho Method: GET.   Sau khi cấu hình xong, chọn Actions -\u0026gt; Deploy API để triển khai.\n  Trong AWS Console, truy cập API Gateway.\n  Chọn API nextgen-api của bạn.\n  Trong phần Resources, click chuột phải vào resource /api và chọn Create Resource.\n  Điền các thông tin sau:\n Resource Name: dashboard Resource Path: /dashboard Nhấn Create Resource.    Tạo file Dashboard HTML\n  Tiếp theo, bạn sẽ tạo một file HTML đơn giản để hiển thị dữ liệu từ API.\n Tạo một file mới với tên dashboard.html và dán đoạn code sau vào:  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;NextGen Dashboard\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; margin: 20px; } .card { border: 1px solid #ddd; padding: 20px; margin: 10px; border-radius: 8px; } .metric { font-size: 2em; color: #007bff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;NextGen Dashboard\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;dashboard\u0026#34;\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function loadData() { fetch(\u0026#39;[https://teq8fa3cy3.execute-api.us-east-1.amazonaws.com/prod/api](https://teq8fa3cy3.execute-api.us-east-1.amazonaws.com/prod/api)\u0026#39;) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { document.getElementById(\u0026#39;dashboard\u0026#39;).innerHTML = `\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;Tasks: \u0026lt;span class=\u0026#34;metric\u0026#34;\u0026gt;${data.metrics.tasks}\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;Users: \u0026lt;span class=\u0026#34;metric\u0026#34;\u0026gt;${data.metrics.users}\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;Alerts: \u0026lt;span class=\u0026#34;metric\u0026#34;\u0026gt;${data.metrics.alerts}\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;`; }) .catch(() =\u0026gt; { document.getElementById(\u0026#39;dashboard\u0026#39;).innerHTML = \u0026#39;API Error\u0026#39;; }); } loadData(); setInterval(loadData, 30000); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Lấy API URL để test: https://teq8fa3cy3.execute-api.us-east-1.amazonaws.com/prod/api   5. Cấu hình SNS Topic SNS được sử dụng để gửi các thông báo tự động.\n Truy cập SNS Console và chọn Create topic. Name: nextgen-alerts Type: Standard  Sau khi tạo topic, chọn Create subscription. Protocol: Email Endpoint: Nhập địa chỉ email của bạn.  Mở email và xác nhận subscription.   6. Cấp quyền cho Lambda Để Lambda Function có thể truy cập DynamoDB và SNS, bạn cần cấp quyền IAM cho nó.\n Truy cập Lambda Console, chọn function nextgen-automation-api. Vào tab Configuration -\u0026gt; Permissions.  Click vào Role name để mở IAM Console. Thêm các chính sách (policies) sau vào role:  AmazonDynamoDBFullAccess  AmazonSNSFullAccess    Lưu lại các thay đổi.  7. Thiết lập CloudWatch Dashboard và Alarms CloudWatch giúp giám sát hệ thống và thiết lập cảnh báo khi có lỗi.\nTạo Dashboard  Truy cập CloudWatch Console -\u0026gt; Dashboards -\u0026gt; Create dashboard.  Dashboard name: NextGen-Monitoring Thêm các widgets để theo dõi các metric của Lambda và API Gateway, ví dụ: Invocations, Errors, Count (của API Gateway).   Tạo Alarm  Trong CloudWatch, vào Alarms -\u0026gt; Create alarm.  Chọn metric Errors của Lambda Function nextgen-automation-api. Đặt điều kiện: Whenever Errors is Greater/Equal (\u0026gt;=) than 3. Cấu hình action để gửi thông báo đến SNS topic nextgen-alerts khi alarm được kích hoạt. Đặt tên alarm là NextGen-Lambda-Errors và lưu lại.  Dọn dẹp tài nguyên Xóa S3 Bucket   Mở Amazon S3 Console.\n  Chọn bucket nextgen-web-app (hoặc tên bucket bạn đã tạo).\n  Nhấn Empty để xóa toàn bộ object.\n  Xác nhận thao tác bằng cách nhập tên bucket, sau đó nhấn Empty.\n  Sau khi bucket rỗng, chọn Delete bucket → nhập tên bucket → Delete.\n  ⚠️ Lưu ý: Việc xóa bucket sẽ xóa toàn bộ dữ liệu lưu trữ bên trong.\n Xóa DynamoDB Table   Mở Amazon DynamoDB Console.\n  Chọn bảng NextGenTasks.\n  Nhấn Delete table.\n  Xác nhận xóa bằng cách nhập tên bảng và nhấn Delete.\n   Xóa Lambda Function   Mở AWS Lambda Console.\n  Tìm và chọn function nextgen-automation-api.\n  Từ menu Actions, chọn Delete.\n  Xác nhận bằng cách nhấn Delete.\n   Xóa API Gateway   Mở Amazon API Gateway Console.\n  Chọn API nextgen-api.\n  Chọn Actions → Delete.\n  Xác nhận bằng cách nhấn Delete.\n   Xóa SNS Topic   Mở Amazon SNS Console.\n  Chọn topic nextgen-alerts.\n  Nhấn Delete → Xác nhận.\n   Xóa CloudWatch Dashboard \u0026amp; Alarm Xóa Dashboard   Mở Amazon CloudWatch Console.\n  Trong menu Dashboards, chọn NextGen-Monitoring.\n  Nhấn Actions → Delete dashboard → Xác nhận.\n  Xóa Alarm   Trong CloudWatch Console, chọn Alarms.\n  Tìm alarm NextGen-Lambda-Errors.\n  Chọn Actions → Delete → Xác nhận.\n   7. Gỡ IAM Role và Policy (nếu tạo riêng cho lab)   Mở IAM Console.\n  Vào Roles, tìm role đã gán cho Lambda hoặc API Gateway.\n  Nhấn Delete role → Xác nhận.\n  Nếu tạo riêng policy cho lab, vào Policies, chọn policy → Delete.\n  Hãy kiểm tra lại toàn bộ tài nguyên trong AWS Console sau khi xóa để đảm bảo không còn dịch vụ nào đang chạy gây phát sinh chi phí.\n\r"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]